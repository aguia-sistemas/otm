using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Net.Sockets;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using NLog;
using Otm.Shared.Config;
using Otm.Server.Logger;
using Snap7;

namespace Otm.Server.Device
{
    public class OtmsDevice : IDevice
    {
        public string Name { get { return Config.Name; } }
        public bool Connected { get { return client?.Connected ?? false; } }

        public BackgroundWorker Worker { get; private set; }
        public Socket client { get; set; }

        private readonly DeviceConfig Config;
        private readonly Dictionary<string, OtmsTag> Tags;
        // private readonly Dictionary<string, object> tagValues;
        private readonly Dictionary<string, int> tagDbIndex;
        private string host;
        private int port;
        private DateTime? connError = null;
        private static readonly ILogger Logger = LoggerFactory.GetCurrentClassLogger();
        private bool firstLoad;

        public OtmsDevice(DeviceConfig dvConfig)
        {
            this.Config = dvConfig;
            this.Tags = new Dictionary<string, OtmsTag>();
            GetConfig(dvConfig);
            firstLoad = true;
        }

        private void GetConfig(DeviceConfig dvConfig)
        {
            // dvConfig.Config = host=192.168.1.1;rack=0;slot=0
            var cparts = dvConfig.Config.Split(';');

            this.host = (cparts.FirstOrDefault(x => x.Contains("host=")) ?? "").Replace("host=", "").Trim();
            var strPort = (cparts.FirstOrDefault(x => x.Contains("port=")) ?? "").Replace("port=", "").Trim();

            this.port = 0;
            int.TryParse(strPort, out this.port);

            foreach (var tag in dvConfig.Tags)
            {
                var newTag = new OtmsTag
                {
                    TagConfig = tag,
                    StrValue = null
                };
                Tags[tag.Name] = newTag;
            }
        }

        public void Start(BackgroundWorker worker)
        {
            // backgroud worker
            Worker = worker;

            while (true)
            {
                try
                {
                    if (this.Connected)
                    {


                        // update all device tag's
                        // ReadDeviceTags();

                        WriteDeviceTags();
                    }
                    else
                    {
                        this.Reconnect();

                        var state = new StateObject();
                        client.BeginReceive(state.buffer, 0, state.buffer.Length, SocketFlags.None,
                            new AsyncCallback(ReceiveCallback), null);

                        //var state = new StateObject();
                        //client.BeginReceive(state.buffer, 0, state.buffer.Length, SocketFlags.None,
                        //    new AsyncCallback(ReceiveCallback), null);

                        firstLoad = false;
                    }
                    // wait 100ms
                    /// TODO: wait time must be equals the minimum update rate of tags
                    var waitEvent = new ManualResetEvent(false);
                    waitEvent.WaitOne(100);

                    if (Worker.CancellationPending)
                    {
                        Stop();
                        return;
                    }
                }
                catch (Exception ex)
                {
                    Logger.Error($"Dev {Config.Name}: Update Loop Error {ex.ToString()}");
                    firstLoad = false;
                }
            }
        }

        private void ReceiveCallback(IAsyncResult ar)
        {
            try
            {
                var state = (StateObject)ar.AsyncState;
                int bytesRead = client.EndReceive(ar);

                if (bytesRead > 0)
                {
                    // There might be more data, so store the data received so far.  
                    // Converte para string os dados recebidos
                    state.received += Encoding.ASCII.GetString(state.buffer, 0, bytesRead);
                    //  Get the rest of the data.  
                    client.BeginReceive(state.buffer, 0, StateObject.BufferSize, 0,
                        new AsyncCallback(ReceiveCallback), state);
                }
                else
                {
                    // Todos os dados recebidos



                    // Signal that all bytes have been received.  
                    // receiveDone.Set();
                }
            }
            catch (Exception ex)
            {
                Logger.Error($"Dev {Config.Name}: Update Loop Error {ex.ToString()}");
            }

        }

        public void Stop()
        {
            //
        }

        public void ReadDeviceTags()
        {
            // get dbs
            foreach (var db in this.dbDict.Values)
            {
                var err = client.DBRead(db.Number, 0, db.Lenght, db.Buffer);

                if (err == 0)
                {
                    if (db.Mode == Modes.ToOTM) // from device to OTM
                    {
                        foreach (var dbItem in db.Itens.Values)
                        {
                            dbItem.OldValue = dbItem.Value;
                            switch (dbItem.Type)
                            {
                                case DataTypes.Int:
                                    dbItem.Value = S7.GetIntAt(db.Buffer, dbItem.Offset);
                                    //tagValues[dbItem.Name] = dbItem.Value;
                                    break;
                                case DataTypes.Float:
                                    dbItem.Value = S7.GetRealAt(db.Buffer, dbItem.Offset);
                                    //tagValues[dbItem.Name] = dbItem.Value;
                                    break;
                                case DataTypes.Bool:
                                    dbItem.Value = S7.GetBitAt(db.Buffer, dbItem.Offset, dbItem.BitOffset);
                                    //tagValues[dbItem.Name] = dbItem.Value;
                                    break;
                                case DataTypes.String:
                                    dbItem.Value = S7.GetStringAt(db.Buffer, dbItem.Offset);
                                    //tagValues[dbItem.Name] = dbItem.Value;
                                    break;
                                default:
                                    //tagValues[dbItem.Name] = null;
                                    Logger.Error($"Dev {Config.Name}: Get value error. Tag {dbItem.Name}");
                                    break;
                            }

                            // this is the first execution of ReadDeviceTags?
                            if (dbItem.OldValue == null)
                            {
                                dbItem.OldValue = dbItem.Value;
                            }
                            else
                            {
                                if (!dbItem.Value.Equals(dbItem.OldValue))
                                {
                                    if (tagsAction.ContainsKey(dbItem.Name))
                                    {
                                        tagsAction[dbItem.Name](dbItem.Name, dbItem.Value);
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    var msg = $"Error on read db {db.Number}. Error {client.ErrorText(err)}";
                    throw new Exception(msg);
                }
            }
        }

        private void WriteDeviceTags()
        {
            // get dbs
            foreach (var db in this.dbDict.Values)
            {
                // this is the first execution of WriteDeviceTags?
                if (firstLoad)
                {
                    var errRead = client.DBRead(db.Number, 0, db.Lenght, db.Buffer);

                    if (errRead != 0)
                    {
                        var msg = $"Error on read db {db.Number}. Error {client.ErrorText(errRead)}";
                        throw new Exception(msg);
                    }
                    else
                        firstLoad = false;
                }

                if (db.Mode == Modes.FromOTM) // from OTM to device
                {
                    foreach (var dbItem in db.Itens.Values)
                    {
                        if (dbItem.Value != null && !dbItem.Value.Equals(dbItem.OldValue))
                        {
                            dbItem.OldValue = dbItem.Value;

                            switch (dbItem.Type)
                            {
                                case DataTypes.Int:
                                    S7.SetIntAt(db.Buffer, dbItem.Offset, (short)((int)dbItem.Value));
                                    break;
                                case DataTypes.Float:
                                    S7.SetRealAt(db.Buffer, dbItem.Offset, (float)dbItem.Value);
                                    break;
                                case DataTypes.Bool:
                                    S7.SetBitAt(ref db.Buffer, dbItem.Offset, dbItem.BitOffset, (bool)dbItem.Value);
                                    break;
                                case DataTypes.String:
                                    S7.SetStringAt(db.Buffer, dbItem.Offset, ((string)dbItem.Value).Length, (string)dbItem.Value);
                                    /// TODO: Create a property to limit lenght of a string
                                    break;
                                default:
                                    //tagValues[dbItem.Name] = null;
                                    Logger.Error($"Dev {Config.Name}: Set value error. Tag {dbItem.Name}");
                                    break;
                            }
                        }
                    }

                    var errWrite = client.DBWrite(db.Number, 0, db.Lenght, db.Buffer);

                    if (errWrite != 0)
                    {
                        var msg = $"Error on write db {db.Number}. Error {client.ErrorText(errWrite)}";
                        throw new Exception(msg);
                    }
                }
            }
        }

        public DeviceTagConfig GetTagConfig(string name)
        {
            return Config.Tags.FirstOrDefault(x => x.Name == name);
        }

        public object GetTagValue(string tagName)
        {
            var dbIdx = tagDbIndex[tagName];
            return dbDict[dbIdx].Itens[tagName].Value;
        }

        public void SetTagValue(string tagName, object value)
        {
            var dbIdx = tagDbIndex[tagName];
            dbDict[dbIdx].Itens[tagName].Value = value;
        }

        private void Reconnect()
        {
            try
            {
                if (client != null)
                    client.Dispose();

                firstLoad = true;
                client = new Socket(SocketType.Stream, ProtocolType.Tcp);
                client.Connect(this.host, this.port);
            }
            catch (Exception ex)
            {
                connError = DateTime.Now;
                Logger.Error($"Dev {Config.Name}: Connection error. {ex.Message}");
            }
        }

        public void OnTagChangeAdd(string tagName, Action<string, object> triggerAction)
        {
            var tagConfig = GetTagConfig(tagName);

            // can't use a output tag as trigger, output put tags are writed to PLC
            if (tagConfig.Mode == Modes.FromOTM) // from OTM to device
            {
                throw new Exception("Error can't put a trigger on a input tag");
            }
            if (!Tags.ContainsKey(tagName))
                Tags[tagName].Action = triggerAction;
            else
                Tags[tagName].Action += triggerAction;
        }

        public void OnTagChangeRemove(string tagName, Action<string, object> triggerAction)
        {
            if (!Tags.ContainsKey(tagName))
                Tags[tagName].Action -= triggerAction;
        }

        public bool ContainsTag(string tagName)
        {
            return Config.Tags.Any(x => x.Name == tagName);
        }

        public class OtmsTag
        {
            public DeviceTagConfig TagConfig;
            public string StrValue;

            public Action<string, object> Action { get; internal set; }

            public T GetValue<T>()
            {
                return default(T);
            }
        }

        public class StateObject
        {
            // Client socket.  
            public Socket workSocket = null;
            // Size of receive buffer.  
            public const int BufferSize = 256;
            // Receive buffer.  
            public byte[] buffer = new byte[BufferSize];
            // Received data string.  
            public String received = "";
        }

    }
}

